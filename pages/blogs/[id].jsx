import Head from 'next/head'
import { Header } from '../../components/Header'
import { Footer } from '../../components/Footer'
import Link from "next/link"
import { client } from "../../libs/client";
import styles from '@/styles/Blogs.module.scss'

export default function BlogsId({ blogs, draftKey }) {
  return (
    <>
      <Head>
        <title>{`${blogs.title} | ブログ`}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;500;600;700&display=swap" rel="stylesheet" />
      </Head>
      <div className={styles.wrapper}>
        {draftKey && (
          <p className={styles.isPreview}>
            プレビュー表示がONになっています。
            <Link href={`/api/exitPreview`}>
              <span className={styles.isPreviewOff}>プレビュー表示をOFFにする</span>
            </Link>
          </p>
        )}
        <Header/>
        <main className={styles.main}>
          <div className={styles.blogsArticle}>
            <div className={styles.blogsHeader}>
              <p className={styles.blogsCategory}>{blogs.category && blogs.category.name}</p>
              <p className={styles.blogsDate}>{new Date(blogs.publishedAt).toLocaleDateString().split("/").join(".")}</p>
              <h1 className={styles.blogsTitle}>{blogs.title}</h1>
            </div>
            <div className={styles.blogsContent}
              dangerouslySetInnerHTML={{
                __html: `${blogs.content}`,
              }}
            />
          </div>
        </main>
        <Footer/>
      </div>
    </>
  );
}

// 静的生成のためのパスを指定します
export const getStaticPaths = async () => {
  const data = await client.get({ endpoint: "blogs" });

  const paths = data.contents.map((content) => `/blogs/${content.id}`);
  return { paths, fallback: false };
};

// データをテンプレートに受け渡す部分の処理を記述します
export const getStaticProps = async (context) => {
  const id = context.params.id;

  const draftKey = context.previewData?.draftKey
    ? { draftKey: context.previewData.draftKey }
    : {};

  const data = await client.get({ endpoint: "blogs", contentId: id, queries: draftKey, });

  if (!data) {
    return { notFound: true }
  }

  return {
    props: {
      blogs: data,
      ...draftKey
    },
  };
};