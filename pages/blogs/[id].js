// pages/blogs/[id].tsx
import Head from 'next/head'
import { client } from "../../libs/client";
import styles from '@/styles/Blogs.module.scss'

export default function BlogsId({ blogs }) {
  return (
    <>
      <Head>
        <title>{`${blogs.title} | ブログ`}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.blogsArticle}>
          <div className={styles.blogsHeader}>
            <p className={styles.blogsDate}>{new Date(blogs.publishedAt).toLocaleDateString()}</p>
            <p className={styles.blogsCategory}>{blogs.category && blogs.category.name}</p>
            <h1 className={styles.blogsTitle}>{blogs.title}</h1>
          </div>
          <div className={styles.blogsContent}
            dangerouslySetInnerHTML={{
              __html: `${blogs.content}`,
            }}
          />
        </div>
      </main>
    </>
  );
}

// 静的生成のためのパスを指定します
export const getStaticPaths = async () => {
  const data = await client.get({ endpoint: "blogs" });

  const paths = data.contents.map((content) => `/blogs/${content.id}`);
  return { paths, fallback: false };
};

// データをテンプレートに受け渡す部分の処理を記述します
export const getStaticProps = async (context) => {
  const id = context.params.id;
  const data = await client.get({ endpoint: "blogs", contentId: id });

  return {
    props: {
      blogs: data,
    },
  };
};